from alembic import op
import sqlalchemy as sa
from werkzeug.security import generate_password_hash


revision = '20250711234404'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('courses',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('nickname', sa.String(length=20), nullable=False),
    sa.Column('course_code', sa.String(length=50), nullable=False),
    sa.Column('period', sa.String(length=20), nullable=False),
    sa.Column('capacity', sa.Integer(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_courses'))
    )
    with op.batch_alter_table('courses', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_courses_course_code'), ['course_code'], unique=False)
        batch_op.create_index(batch_op.f('ix_courses_nickname'), ['nickname'], unique=True)

    op.create_table('schedules',
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('times', sa.JSON(), nullable=False),
    sa.Column('user_name', sa.String(length=100), nullable=False),
    sa.Column('course_code', sa.String(length=50), nullable=False),
    sa.Column('annotation', sa.Text(), nullable=True),
    sa.Column('repeat_type', sa.Enum('NONE', 'DAILY', 'WEEKLY', 'MONTHLY', name='repeattype'), nullable=True),
    sa.Column('lab_nickname', sa.String(length=10), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'CONFIRMED', 'CANCELLED', name='bookingstatus'), nullable=True),
    sa.Column('user_id', sa.String(length=50), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_schedules'))
    )
    with op.batch_alter_table('schedules', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_schedules_course_code'), ['course_code'], unique=False)
        batch_op.create_index(batch_op.f('ix_schedules_date'), ['date'], unique=False)
        batch_op.create_index(batch_op.f('ix_schedules_lab_nickname'), ['lab_nickname'], unique=False)
        batch_op.create_index(batch_op.f('ix_schedules_user_id'), ['user_id'], unique=False)

    op.create_table('users',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('type', sa.Enum('ADMIN', 'USER', 'STUDENT', 'PROFESSOR', name='usertype'), nullable=False),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('last_login', sa.DateTime(timezone=True), nullable=True),
    sa.Column('login_count', sa.Integer(), nullable=True),
    sa.Column('profile_image', sa.String(length=255), nullable=True),
    sa.Column('bio', sa.String(length=500), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users'))
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)

    op.create_table('students',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=False),
    sa.Column('course_id', sa.Integer(), nullable=False),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('registration_number', sa.String(length=50), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], name=op.f('fk_students_course_id_courses')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_students'))
    )
    with op.batch_alter_table('students', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_students_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_students_registration_number'), ['registration_number'], unique=True)

    # Insert SA user
    sa_password_hash = generate_password_hash('masterkey')
    
    op.execute(
        f"INSERT INTO users (id, name, email, password_hash, type, phone, is_active, bio, login_count, created_at, updated_at) "
        f"VALUES (0, 'SA', 'super@admin.com', '{sa_password_hash}', 'ADMIN', '', 1, 'Super Administrator', 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)"
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('students')
    op.drop_table('users')
    op.drop_table('schedules')
    op.drop_table('courses')
    # ### end Alembic commands ###
